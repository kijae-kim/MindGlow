리팩토링
- 소프트웨어 개발 과정에서 코드를 재구성하여 가독성 높이고 유지보수를 쉽게 만드는 과정
- 코드의 구조를 개선하고 중복을 제거하여 더 나은 설계 패턴을 도입함으로 코드의 품질을 향상
- 코드의 기능을 변경하지 않으면서 코드를 개선하는 방법


express-validator
Express.js를 사용하여 웹 애플리케이션을 개발할 때 입력 데이터의 유효성을 검사하기 위한 패키지
(데이터 전할 때, 해커가 데이터를 집어넣었을 때를 대비한 체크방법)

설치
    npm i express-validator


isLength(): 문자열 길이 검증

    app.get('/:email', [param('email').isLEngth({min3}).withMessage('이메일 3자 이상입력'), validate], (req, res, next) => {
    res.send('💌');
    });

isEmail(): 이메일 주소의 유효성 검증

    app.get('/:email', [param('email').isEmail().withMessage('이메일 입력'), validate], (req, res, next) => {
    res.send('💌');
    });

isInt(): 숫자의 최소 또는 최대값 검증

    app.get('/:num', [param('num').isInt({min:10, max:100}).withMessage('숫자의 범위는 10이상 100이하로 입력'), validate], (req, res, next) => {
    res.send('🧡');
    });

matches(): 정규표현식을 사용하여 문자열의 패턴을 검증

    app.get('/:name', [param('email').matches(/^[가-힣]+$/).withMessage('한글로 입력'), validate], (req, res, next) => {
    res.send('💌');
    });



문제
Post, Put에 대해 빈문자열을 없애고, 최소 3자 이상 입력해야 데이터를 저장하도록 API에 적용



과제
- router, data, controller에 auth.js 를 추가하고 tweet.js 를 참고하여 적용
- 회원가입, 로그인(회원정보 확인, 아이디 보내면 해당 객체의 정보만 출력)

    user = [
        {
            id: '1',
            username: 'apple',
            password: '1111',
            name: '김사과',
            email: 'apple@apple.com',
            url: 'https://img.freepik.com/premium-vector/banana-cute-kawaii-style-fruit-character-vector-illustration_787461-1772.jpg'
        },
        {
            ...
        }
    ]

----------------------------------------------------------------

Authentication(인증)

1. session & cookie
쿠키
- 클라이언트 컴퓨터에 저장되는 작은 데이터 조작
- 서버로 부터 전송되어 클라이언트 웹 브라우저에 저장
- 텍스트 형식으로 주로 사용자 인증, 설정, 장바구니 등에 사용
세션
- 웹 서버 측에서 유지되는 상태 정보
- 사용자에 대한 공유한 세션ID를 통해 식별
- 서버 메모리 또는 데이터베이스에 저장할 수 있음


2. JWT(JSON Web Token)
- 웹 애플리케이션과 서비스 간에 정보를 안전하게 전달하기 위한 인증 및 권한 부여 매커니즘을 구현하는데 사용되는 표준화된 방법 중 하나
- JSON 포맷 사용하여, 정보 표현하고 서명 및 암호화를 통해 정보의 무결성 보장

    ( Header | Payload | Signature )

Header: 토큰 유형 및 서명 알고리즘과 같은 메타데이터가 포함
payload: 토큰에 포함된 데이터가 들어있는 부분
Signature: 헤더, 페이로드 및 비밀 키를 사용하여 생성된 서명으로 토큰의 무결성 검증하는데 사용

설치
npm i jsonwebtoken


3. bcrypt
- 해시 함수를 사용하여 비밀번호를 안전하게 저장하는데 사용되는 암호화 라이브러리
- 단방향 해시 함수로 한번 해시된 값을 다시 원래 값으로 역추적하는 것이 불가능
- 솔트(salt): 해시에 고유한 솔트 값을 추가하여 보안상을 높임. 같은 비밀번호를 가진 사용자가 있더라도 서로 다른 해시값을 가짐
- 작업인자(Adaptive Work Factor): 매개변수를 조정하여 해시 작업의 복잡성을 조절. 암호 분석학적으로 안전한 해시 함수를 유지하면서도 암호화 작업에 필요한 시간을 조절할 수 있게 함(왠만하면 간단하게 만들자-> 시간단축)

설치
npm i bcrypt

✔ 해시 함수
임의의 길이의 데이터를 받아서 고정된 길이의 고유한 값으로 변환하는 함수.
이러한 변환된 값은 해시 값 또는 해시 코드라고 함
- 동일한 입력에 대해 항상 동일한 해시 값을 생성
    (동일한 값은 동일한 해시값이 나옴.)
- 고정된 출력 길이를 생성
- 해시된 값을 통해 원본 값을 복구할 수 없음


문제
controller/auth.js 에서 login()를 bcrypt를 적용하여 로그인 프로세스를 만들어보자.


문제
jwt.js를 참고하여 controller/auth.js에 토큰을 발행하고 login()에 로그인 완료되면 클라이언트에 토큰을 출력하는 프로세스 생성


4. jsonwebtoken
- 웹 애플리케이션에서 인증 및 정보 교환을 위한 토큰 기반의 인증 방식 중 하나
- Base64로 인코딩된 JSON 객체이며 사용자 정보 및 기타 데이터를 안전하게 전송하기 위해 사용
- header: JWT의 유형과 해싱 알고리즘이 포함
    // 기본값(적어줄 필요없음)
    {
        "alg":"HS256",
        "typ":"JWT"
    }
- Payload: 토큰에 담길 정보가 포함(이것만 생각하면 됌)
    {
        id: 'apple',
        isAdmin: false
    }
- Signature: 헤더와 페이로드를 인코딩하고 비밀키를 사용하여 서명된 문자열, 서명은 토큰이 변조되지 않았음을 확인하는데 사용

sign()
    jsonwebtoken.sign(payload, secretOrPrivateKey, [options, callback])
    payload: JWT에 포함될 페이로드 데이터
    secretOrPrivateKey: JWT 서명하기 위해 사용될 비밀키 또는 개인키


-------------------------------------------------------------
문제.
회원가입시 아이디 중복체크 하기
단, 중복이라면 409를 리턴

-----------------------------------------------------------
5/3
환경 변수 관리(secret, 포트번호 등 유출되면 안되는 것들.)
- 로컬에서 개발 또는 서버에 배포할 때 DB연결, 포트 설정, 시크릿 키 등 안전하게 관리하기 위한 환경 변수로 처리
- .env 라는 파일에 환경변수를 설정

    npm i dotenv

HTTP 통신
- 요청(request, 클라이언트)과 응답(response, 서버)으로 이루어짐
- 클라이언트가 요청을 먼저하고 서버는 수동적으로 응답해주는 구조
- 반이중통신

웹소켓(Web Socket)
- 브라우저에서 지원하는 소켓통신
- 실시간 네트워킹이 보장
- 전이중통신

웹소켓의 동작원리
1. 최초 연결 요청 시 클라이언트에서 HTTP를 통해 웹서버에 요청
    (핸드쉐이크, Handshake: Websocket 프로토콜로 전환)
2. 연결 수립되면 클라이언트와 서버 양측간의 데이터 통신 단계가 시작
    - 양방향 통신(전이중통신)
    - 상대방에서 ping 패킷을 보낼 수 있음, 수신한 측은 pong 패킷을 전송함
3. 클라이언트 혹은 서버 양측 누구나 연결을 종료할 수 있음

Socket.IO
- Node.js 기반의 웹소켓 라이브러리
- 실시간 양방향 통신을 가능하게 해주는 도구

    npm i socket.io


문제
채널 생성하여 채팅을 완성해보자

닉네임: [     ] [설정]
채널: [       ] [입장]
채널리스트
게임
만화
...
[          ] [보내기]

socket.join(값): 해당 값에 속한 소켓 객체가 됨

    // 채널 설정
    socket.join(channel); // 해당 채널의 속한 객체가 됨
    
    // 메세지 설정
    io.emit(): 모든 소켓 객체에게 이벤트를 발생
    io.to(channel).emit(): //해당 채널의 속한 객체에게만 이벤트 발생

-------------------------------------------------------------------
5/8
ORM(객체 관계 매핑, Object Relation Mapping)
- 객체 지향 프로그래밍 언어에서 사용되는 객체와 관계형 데이터베이스 간의 불일치를 해결하기 위한 기술
- 객체 모델과 관계형 데이터베이스의 테이블 간의 매핑을 수행하여 개발자가 SQL 쿼리 대신 객체 지향 코드를 사용할 수 있도록 함


ODM(객체 문서 매핑)
- NoSQL 데이터베이스와 객체 지향 프로그래밍 언어 간의 매핑을 제공하는 기술
- 주로 문서 지향 데이터베이스(MongoDB)와 함께 사용


현재 작업중인 브랜치를 확인
- 목록을 확인

    git branch

- * 표시가 되어 있는 것이 현재 작업중인 브랜치

branch 생성하기
git branch 브랜치이름

branch 전환하기
git switch 브랜치이름
git checkout 브랜치이름

branch 생성과 동시에 전환하기
git checkout -b 브랜치이름  // 없으면 만들고 있으면 전환

-------------------------------------------------------------
https://sequelize.org/

Sequelize
- node.js에서 mysql 등 RDBMS를 쉽게 다룰 수 있도록 도와주는 라이브러리

    npm i sequelize


MongoDB
- MongoDB는 NoSQL 데이터베이스로 문서 기반 데이터 저장 방식을 채택한 오픈소스 DBMS
- 관계형 데이터베이스와 달리 스키마가 없으며, BSON(Binary JSON) 형태로 데이터를 저장
- 유연성이 좋고, 대규모 데이터 처리에 용이
- 단점은 스키마가 없어, 데이터가 중구난방될 가능성 존재


MongoDB Atlas
- MongoDB의 관리형 클라우드 데이터베이스 서비스
- MongoDB 데이터베이스를 클라우드에서 호스팅하고 관리하는 것을 중심으로 하며, 개발자 및 기업이 손쉽게 애플리케이션을 빌드하고 배포할 수 있도록 지원
-------------------------------------------------------------------
5/10(branch는 mongodb 그대로 사용)

Mongoose
- Node.js와 MongoDB를 위한 ODM(Object Data Mapping) 라이브러리
- Javascript Object와 MongoDB의 데이터를 Mapping하여 호환성을 만들어내고, 간편한 CRUD를  가능
- Mongo에 스키마를 적용할 수 있음

    npm i mongoose


