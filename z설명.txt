ejs 예저들
app.js
	app.set('view engine', 'ejs');
----------------------------------------------
app.get('/', (req, res) => {
    const data = { title: 'Hello, EJS!', message: 'Welcome to the EJS example page.' };
    res.render('index', data);
});

----------------------------------------------
<!-- views/index.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
</head>
<body>
    <h1><%= title %></h1>
    <p><%= message %></p>
</body>
</html>
**************************************************************************


JWT 토큰을 Express 백엔드에서 반환받고 이를 프론트엔드에서 활용하여 헤더에 담아 백엔드에 요청하는 과정은 다음과 같습니다.

토큰 저장: 백엔드에서 반환된 JWT 토큰을 로컬 스토리지나 세션 스토리지에 저장합니다.
헤더에 토큰 추가: 저장된 JWT 토큰을 API 요청 시 헤더에 추가합니다.
1. JWT 토큰 저장
JWT 토큰을 백엔드에서 받아서 저장하는 예제입니다. 여기서는 fetch를 사용하여 로그인 요청을 보내고 응답에서 JWT 토큰을 저장하는 예제를 보여드립니다.

javascript
---------------------------------------------------------------
// 로그인 요청 예제
async function login(username, password) {
  const response = await fetch('http://your-backend-api.com/login', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ username, password })
  });

  const data = await response.json();
  
  if (response.ok) {
    // JWT 토큰을 로컬 스토리지에 저장
    localStorage.setItem('jwtToken', data.token);
  } else {
    console.error('로그인 실패:', data.message);
  }
}
-------------------------------------------------------
2. API 요청 시 헤더에 JWT 토큰 추가
저장된 JWT 토큰을 가져와서 API 요청 시 헤더에 추가하는 예제입니다.

javascript
-------------------------------------------------------
// API 요청 예제
async function fetchProtectedData() {
  const token = localStorage.getItem('jwtToken');

  const response = await fetch('http://your-backend-api.com/protected-endpoint', {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`
    }
  });

  const data = await response.json();
  
  if (response.ok) {
    console.log('Protected data:', data);
  } else {
    console.error('데이터 요청 실패:', data.message);
  }
}
-------------------------------------------------------
예제 설명
로그인 함수:

fetch를 사용하여 백엔드의 로그인 엔드포인트에 POST 요청을 보냅니다.
로그인 성공 시 응답에서 받은 JWT 토큰을 로컬 스토리지에 저장합니다.
보호된 API 데이터 요청 함수:

로컬 스토리지에서 JWT 토큰을 가져옵니다.
fetch를 사용하여 보호된 엔드포인트에 GET 요청을 보낼 때, Authorization 헤더에 Bearer {토큰} 형식으로 JWT 토큰을 추가합니다.
이 과정을 통해 프론트엔드에서 JWT 토큰을 백엔드에 요청할 때 헤더에 포함시켜 보낼 수 있습니다. 프론트엔드의 보안 관점에서 보면, 로컬 스토리지보다는 httpOnly 쿠키에 토큰을 저장하는 것이 더 안전할 수 있으나, 이 경우 설정이 더 복잡해질 수 있습니다. 요구사항에 맞게 저장 방식을 선택하세요.